#!/bin/bash

##############################################################################
#                        üß™ TESTE DO KRYONIX DEPLOY                         #
#         Script para testar sintaxe e validar l√≥gica antes do deploy        #
##############################################################################

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

log_test() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%H:%M:%S')
    
    case $level in
        "SUCCESS")
            echo -e "${GREEN}‚úÖ [$timestamp] $message${NC}"
            ;;
        "ERROR")
            echo -e "${RED}‚ùå [$timestamp] $message${NC}"
            ;;
        "WARNING")
            echo -e "${YELLOW}‚ö†ÔøΩÔøΩ  [$timestamp] $message${NC}"
            ;;
        "INFO")
            echo -e "${BLUE}‚ÑπÔ∏è  [$timestamp] $message${NC}"
            ;;
        "TEST")
            echo -e "${PURPLE}üß™ [$timestamp] $message${NC}"
            ;;
    esac
}

echo -e "${BOLD}${PURPLE}"
cat << 'EOF'
##############################################################################
#                        üß™ TESTE DO KRYONIX DEPLOY                         #
#         Script para testar sintaxe e validar l√≥gica antes do deploy        #
##############################################################################
EOF
echo -e "${NC}"
echo

# Teste 1: Verificar sintaxe do script principal
log_test "TEST" "Verificando sintaxe do deploy_kryonix_fixed.sh..."

if bash -n deploy_kryonix_fixed.sh 2>/dev/null; then
    log_test "SUCCESS" "Sintaxe do script principal est√° correta"
else
    log_test "ERROR" "Erro de sintaxe encontrado no script principal"
    bash -n deploy_kryonix_fixed.sh
    exit 1
fi

# Teste 2: Verificar se todas as vari√°veis necess√°rias est√£o definidas
log_test "TEST" "Verificando defini√ß√£o de vari√°veis essenciais..."

required_vars=(
    "SERVER_IP"
    "DOMAIN1" 
    "DOMAIN2"
    "GITHUB_REPO"
    "PORTAINER_USER"
    "PORTAINER_PASS"
    "POSTGRES_PASSWORD"
    "REDIS_PASSWORD"
    "N8N_PASSWORD"
    "GRAFANA_PASSWORD"
    "MINIO_PASSWORD"
)

missing_vars=0
for var in "${required_vars[@]}"; do
    if grep -q "^$var=" deploy_kryonix_fixed.sh; then
        log_test "SUCCESS" "‚úì Vari√°vel $var definida"
    else
        log_test "ERROR" "‚úó Vari√°vel $var n√£o encontrada"
        ((missing_vars++))
    fi
done

if [ $missing_vars -eq 0 ]; then
    log_test "SUCCESS" "Todas as vari√°veis essenciais est√£o definidas"
else
    log_test "ERROR" "$missing_vars vari√°veis essenciais est√£o faltando"
fi

# Teste 3: Verificar se todas as fun√ß√µes essenciais est√£o presentes
log_test "TEST" "Verificando presen√ßa de fun√ß√µes essenciais..."

required_functions=(
    "show_banner"
    "check_root"
    "intelligent_system_update"
    "intelligent_docker_install"
    "intelligent_project_analysis"
    "intelligent_directory_setup"
    "intelligent_traefik_setup"
    "create_intelligent_compose"
    "create_intelligent_dockerfiles"
    "intelligent_project_build"
    "intelligent_final_deploy"
    "verify_deployment"
    "test_https_connectivity"
    "show_final_links"
    "main"
)

missing_functions=0
for func in "${required_functions[@]}"; do
    if grep -q "^$func()" deploy_kryonix_fixed.sh; then
        log_test "SUCCESS" "‚úì Fun√ß√£o $func() encontrada"
    else
        log_test "ERROR" "‚úó Fun√ß√£o $func() n√£o encontrada"
        ((missing_functions++))
    fi
done

if [ $missing_functions -eq 0 ]; then
    log_test "SUCCESS" "Todas as fun√ß√µes essenciais est√£o presentes"
else
    log_test "ERROR" "$missing_functions fun√ß√µes essenciais est√£o faltando"
fi

# Teste 4: Verificar estrutura do docker-compose gerado
log_test "TEST" "Verificando estrutura do docker-compose no script..."

required_services=(
    "traefik"
    "postgres"
    "redis"
    "project-frontend"
    "project-backend"
    "portainer-siqueira"
    "portainer-meuboot"
    "adminer"
    "n8n"
    "grafana"
    "minio"
)

missing_services=0
for service in "${required_services[@]}"; do
    if grep -q "  $service:" deploy_kryonix_fixed.sh; then
        log_test "SUCCESS" "‚úì Servi√ßo $service configurado"
    else
        log_test "ERROR" "‚úó Servi√ßo $service n√£o encontrado"
        ((missing_services++))
    fi
done

if [ $missing_services -eq 0 ]; then
    log_test "SUCCESS" "Todos os servi√ßos essenciais est√£o configurados"
else
    log_test "ERROR" "$missing_services servi√ßos essenciais est√£o faltando"
fi

# Teste 5: Verificar se h√° configura√ß√µes HTTPS/Traefik
log_test "TEST" "Verificando configura√ß√µes HTTPS e Traefik..."

if grep -q "letsencrypt" deploy_kryonix_fixed.sh; then
    log_test "SUCCESS" "‚úì Configura√ß√£o Let's Encrypt encontrada"
else
    log_test "ERROR" "‚úó Configura√ß√£o Let's Encrypt n√£o encontrada"
fi

if grep -q "traefik.http.routers" deploy_kryonix_fixed.sh; then
    log_test "SUCCESS" "‚úì Configura√ß√µes de roteamento Traefik encontradas"
else
    log_test "ERROR" "‚úó Configura√ß√µes de roteamento Traefik n√£o encontradas"
fi

# Teste 6: Verificar permiss√µes e estrutura de diret√≥rios
log_test "TEST" "Verificando configura√ß√µes de diret√≥rios e permiss√µes..."

if grep -q "mkdir -p.*KRYONIX_DIR" deploy_kryonix_fixed.sh; then
    log_test "SUCCESS" "‚úì Cria√ß√£o de diret√≥rios configurada"
else
    log_test "ERROR" "‚úó Cria√ß√£o de diret√≥rios n√£o configurada"
fi

if grep -q "chown" deploy_kryonix_fixed.sh; then
    log_test "SUCCESS" "‚úì Configura√ß√£o de permiss√µes encontrada"
else
    log_test "WARNING" "‚ö† Configura√ß√£o de permiss√µes n√£o encontrada"
fi

# Teste 7: Verificar se h√° tratamento de erros
log_test "TEST" "Verificando tratamento de erros..."

if grep -q "handle_error" deploy_kryonix_fixed.sh; then
    log_test "SUCCESS" "‚úì Tratamento de erros configurado"
else
    log_test "WARNING" "‚ö† Tratamento de erros b√°sico"
fi

if grep -q "trap.*ERR" deploy_kryonix_fixed.sh; then
    log_test "SUCCESS" "‚úì Trap de erros configurado"
else
    log_test "WARNING" "‚ö† Trap de erros n√£o configurado"
fi

# Teste 8: Verificar logs e feedback visual
log_test "TEST" "Verificando sistema de logs e feedback visual..."

if grep -q "log.*SUCCESS\|ERROR\|WARNING\|INFO" deploy_kryonix_fixed.sh; then
    log_test "SUCCESS" "‚úì Sistema de logs configurado"
else
    log_test "ERROR" "‚úó Sistema de logs n√£o encontrado"
fi

# Teste 9: Simular execu√ß√£o dry-run das principais fun√ß√µes
log_test "TEST" "Executando teste dry-run das fun√ß√µes de valida√ß√£o..."

# Simular verifica√ß√£o de root (sem ser root)
if grep -q "EUID.*root" deploy_kryonix_fixed.sh; then
    log_test "SUCCESS" "‚úì Verifica√ß√£o de root implementada"
else
    log_test "ERROR" "‚úó Verifica√ß√£o de root n√£o implementada"
fi

# Resumo final dos testes
echo
echo -e "${BOLD}${CYAN}üìä RESUMO DOS TESTES:${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅÔøΩÔøΩ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

total_errors=$(( missing_vars + missing_functions + missing_services ))

if [ $total_errors -eq 0 ]; then
    log_test "SUCCESS" "üéâ TODOS OS TESTES PASSARAM! Script pronto para deploy"
    echo
    echo -e "${BOLD}${GREEN}‚úÖ O script deploy_kryonix_fixed.sh est√° validado e pronto para uso!${NC}"
    echo -e "${BOLD}${GREEN}üöÄ Pode executar no servidor com seguran√ßa${NC}"
    echo
    exit 0
else
    log_test "ERROR" "‚ùå $total_errors problemas encontrados no script"
    echo
    echo -e "${BOLD}${RED}‚ö†Ô∏è  O script precisa de corre√ß√µes antes do deploy${NC}"
    echo -e "${BOLD}${YELLOW}üîß Corrija os problemas identificados acima${NC}"
    echo
    exit 1
fi
