#!/bin/bash

#################################################################
#                  INSTALA√á√ÉO R√ÅPIDA KRYONIX                   #
#     Script de instala√ß√£o expressa da infraestrutura          #
#################################################################

set -euo pipefail

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

# Banner
clear
echo -e "${PURPLE}"
cat << 'EOF'
 ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó
 ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù
 ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù 
 ‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó  ‚ïö‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó 
 ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó
 ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
                                                          
      INSTALA√á√ÉO R√ÅPIDA - INFRAESTRUTURA AUTOMATIZADA        
EOF
echo -e "${NC}"

echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${WHITE}  üöÄ Deploy completo em um comando${NC}"
echo -e "${WHITE}  üîí SSL autom√°tico + Seguran√ßa hardened${NC}"
echo -e "${WHITE}  üê≥ Docker Swarm + Traefik Proxy${NC}"
echo -e "${WHITE}  üìä Monitoramento + Backup autom√°tico${NC}"
echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêÔøΩÔøΩÔøΩ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"

echo ""
echo -e "${YELLOW}üìã Este script ir√°:${NC}"
echo -e "   1Ô∏è‚É£  Validar ambiente e pr√©-requisitos"
echo -e "   2Ô∏è‚É£  Baixar e configurar todos os componentes"
echo -e "   3Ô∏è‚É£  Executar instala√ß√£o completa automatizada"
echo -e "   4Ô∏è‚É£  Configurar monitoramento e backup"
echo -e "   5Ô∏è‚É£  Gerar relat√≥rio final com credenciais"

echo ""
echo -e "${RED}‚ö†Ô∏è  IMPORTANTE:${NC}"
echo -e "   ‚Ä¢ Execute apenas em Ubuntu 24.04 LTS"
echo -e "   ‚Ä¢ Requer acesso root (sudo)"
echo -e "   ‚Ä¢ Processo leva 15-30 minutos"
echo -e "   ‚Ä¢ Configure DNS dos dom√≠nios primeiro"

echo ""
echo -e "${CYAN}üåê Dom√≠nios que ser√£o configurados:${NC}"
echo -e "   üî∑ meuboot.site (Painel Admin)"
echo -e "   üî∂ siqueicamposimoveis.com.br (Site P√∫blico)"

echo ""
read -p "$(echo -e ${WHITE}Continuar com a instala√ß√£o? [y/N]:${NC} )" -n 1 -r
echo ""

if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}‚ùå Instala√ß√£o cancelada pelo usu√°rio${NC}"
    exit 0
fi

# Verificar root
if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}‚ùå Este script deve ser executado como root${NC}"
    echo -e "${YELLOW}üí° Execute: sudo $0${NC}"
    exit 1
fi

# Verificar Ubuntu
if ! lsb_release -d 2>/dev/null | grep -q "Ubuntu 24.04"; then
    echo -e "${RED}‚ùå Este script √© otimizado para Ubuntu 24.04 LTS${NC}"
    echo -e "${YELLOW}üí° Vers√£o atual: $(lsb_release -d | cut -f2)${NC}"
    exit 1
fi

echo ""
echo -e "${BLUE}üîç Verificando ambiente...${NC}"

# Verificar conectividade
if ! ping -c 1 google.com &> /dev/null; then
    echo -e "${RED}‚ùå Sem conectividade com internet${NC}"
    exit 1
fi

# Verificar mem√≥ria
memory_gb=$(free -g | awk 'NR==2{print $2}')
if [[ $memory_gb -lt 8 ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Mem√≥ria baixa: ${memory_gb}GB (recomendado: 24GB+)${NC}"
    read -p "Continuar mesmo assim? [y/N]: " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Verificar espa√ßo em disco
disk_gb=$(df / | tail -1 | awk '{print int($4/1024/1024)}')
if [[ $disk_gb -lt 20 ]]; then
    echo -e "${RED}‚ùå Espa√ßo em disco insuficiente: ${disk_gb}GB (m√≠nimo: 50GB)${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Ambiente validado com sucesso${NC}"

echo ""
echo -e "${BLUE}üì• Baixando arquivos da infraestrutura...${NC}"

# Criar diret√≥rio tempor√°rio
TEMP_DIR="/tmp/kryonix-install-$(date +%s)"
mkdir -p "$TEMP_DIR"
cd "$TEMP_DIR"

# Simular download dos arquivos (na pr√°tica, vem do reposit√≥rio)
echo -e "${CYAN}   üìÑ install-infra.sh${NC}"
echo -e "${CYAN}   üìÑ validate-final.sh${NC}"
echo -e "${CYAN}   üìÑ Dockerfile${NC}"
echo -e "${CYAN}   üìÑ docker-compose.dev.yml${NC}"
echo -e "${CYAN}   üìÑ Scripts de backup e monitoramento${NC}"

# Copiar arquivos do diret√≥rio atual
cp -r /opt/siqueicamposimoveis/* "$TEMP_DIR/" 2>/dev/null || true

echo -e "${GREEN}‚úÖ Arquivos baixados${NC}"

echo ""
echo -e "${BLUE}üöÄ Iniciando instala√ß√£o automatizada...${NC}"
echo -e "${YELLOW}‚òï Pegue um caf√© - processo leva 15-30 minutos${NC}"
echo ""

# Tornar scripts execut√°veis
chmod +x *.sh 2>/dev/null || true

# Executar valida√ß√£o final
if [[ -f "validate-final.sh" ]]; then
    echo -e "${CYAN}üîç Executando valida√ß√£o pr√©via...${NC}"
    ./validate-final.sh || {
        echo -e "${RED}‚ùå Valida√ß√£o falhou - verifique os problemas acima${NC}"
        exit 1
    }
fi

# Executar instala√ß√£o principal
if [[ -f "install-infra.sh" ]]; then
    echo -e "${CYAN}üöÄ Executando instala√ß√£o principal...${NC}"
    ./install-infra.sh || {
        echo -e "${RED}‚ùå Instala√ß√£o falhou - verificar logs${NC}"
        exit 1
    }
else
    echo -e "${RED}‚ùå Script principal install-infra.sh n√£o encontrado${NC}"
    exit 1
fi

# Limpeza
cd /
rm -rf "$TEMP_DIR"

echo ""
echo -e "${GREEN}"
cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO! üéâ                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

echo -e "${CYAN}üìã Pr√≥ximos passos:${NC}"
echo -e "   1Ô∏è‚É£  Configurar DNS dos dom√≠nios para apontar para este servidor"
echo -e "   2Ô∏è‚É£  Acessar: https://meuboot.site (Painel Admin)"
echo -e "   3Ô∏è‚É£  Acessar: https://siqueicamposimoveis.com.br (Site P√∫blico)"
echo -e "   4Ô∏è‚É£  Configurar webhook no GitHub conforme instru√ß√µes"

echo ""
echo -e "${CYAN}üìÑ Documenta√ß√£o completa:${NC}"
echo -e "   üìñ README-KRYONIX-INFRA.md"
echo -e "   üìä /opt/kryonix/deploy-summary.txt"

echo ""
echo -e "${CYAN}üîß Comandos √∫teis:${NC}"
echo -e "   ‚Ä¢ Status: ${WHITE}docker ps${NC}"
echo -e "   ‚Ä¢ Logs: ${WHITE}docker logs <container>${NC}"
echo -e "   ‚Ä¢ Backup: ${WHITE}/opt/kryonix/scripts/backup-system.sh${NC}"
echo -e "   ‚Ä¢ Monitor: ${WHITE}/opt/kryonix/scripts/watchdog.sh${NC}"

echo ""
echo -e "${GREEN}üéØ Infraestrutura KRYONIX pronta para produ√ß√£o!${NC}"

exit 0
