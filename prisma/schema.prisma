generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Usuario {
  id            String   @id @default(cuid())
  nome          String
  email         String   @unique
  senha         String?
  whatsapp      String?
  ativo         Boolean  @default(true)
  papel         String   @default("CLIENTE") // ADMIN, CORRETOR, ASSISTENTE, CLIENTE, MARKETING, DESENVOLVEDOR
  googleId      String?  @unique
  avatar        String?
  criadoEm      DateTime @default(now())
  atualizadoEm  DateTime @updatedAt

  // Relacionamentos
  leads         Lead[]         @relation("CorretorLeads")
  imoveis       Imovel[]       @relation("CorretorImoveis")
  visitas       Visita[]       @relation("ClienteVisitas")
  favoritos     Favorito[]
  contratos     Contrato[]
  mensagens     Mensagem[]
  notificacoes  Notificacao[]
  logSistema    LogSistema[]
  comissoes     Comissao[]

  @@map("usuarios")
}

model Imovel {
  id                String         @id @default(cuid())
  titulo           String
  descricao        String
  tipo             String         // CASA, APARTAMENTO, TERRENO, COMERCIAL, RURAL
  finalidade       String         // VENDA, ALUGUEL, AMBOS
  preco            Float
  area             Float
  quartos          Int
  banheiros        Int
  vagas            Int?
  endereco         String
  bairro           String
  cidade           String
  estado           String
  cep              String?
  latitude         Float?
  longitude        Float?
  fotos            String?        // JSON string with array of photo URLs
  status           String         @default("DISPONIVEL") // DISPONIVEL, VENDIDO, ALUGADO, RESERVADO, INATIVO
  destaque         Boolean        @default(false)
  visualizacoes    Int           @default(0)
  criadoEm         DateTime      @default(now())
  atualizadoEm     DateTime      @updatedAt

  // Relacionamentos
  corretor         Usuario       @relation("CorretorImoveis", fields: [corretorId], references: [id])
  corretorId       String
  leads            Lead[]
  favoritos        Favorito[]
  visitas          Visita[]
  contratos        Contrato[]

  @@map("imoveis")
}

model Lead {
  id           String    @id @default(cuid())
  nome         String
  telefone     String?
  email        String?
  mensagem     String?
  origem       String    // SITE, WHATSAPP, TELEFONE, FACEBOOK, INSTAGRAM, INDICACAO
  status       String    @default("PENDENTE") // PENDENTE, ASSUMIDO, EXPIRADO, CONVERTIDO, PERDIDO
  criadoEm     DateTime  @default(now())
  atualizadoEm DateTime  @updatedAt

  // Relacionamentos
  corretor     Usuario?  @relation("CorretorLeads", fields: [corretorId], references: [id])
  corretorId   String?
  imovel       Imovel?   @relation(fields: [imovelId], references: [id])
  imovelId     String?
  visitas      Visita[]
  mensagens    Mensagem[]

  @@map("leads")
}

model Favorito {
  id         String   @id @default(cuid())
  criadoEm   DateTime @default(now())

  // Relacionamentos
  usuario    Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId  String
  imovel     Imovel   @relation(fields: [imovelId], references: [id], onDelete: Cascade)
  imovelId   String

  @@unique([usuarioId, imovelId])
  @@map("favoritos")
}

model Visita {
  id           String   @id @default(cuid())
  dataHora     DateTime
  observacoes  String?
  status       String   @default("AGENDADA") // AGENDADA, REALIZADA, CANCELADA, REAGENDADA
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  // Relacionamentos
  cliente      Usuario  @relation("ClienteVisitas", fields: [clienteId], references: [id])
  clienteId    String
  imovel       Imovel   @relation(fields: [imovelId], references: [id])
  imovelId     String
  lead         Lead?    @relation(fields: [leadId], references: [id])
  leadId       String?

  @@map("visitas")
}

model Contrato {
  id                String    @id @default(cuid())
  numero            String    @unique
  tipo              String    // VENDA, ALUGUEL
  valor             Float
  dataInicio        DateTime
  dataFim           DateTime?
  status            String    @default("ATIVO") // ATIVO, FINALIZADO, CANCELADO
  observacoes       String?
  criadoEm          DateTime  @default(now())
  atualizadoEm      DateTime  @updatedAt

  // Relacionamentos
  cliente           Usuario   @relation(fields: [clienteId], references: [id])
  clienteId         String
  imovel            Imovel    @relation(fields: [imovelId], references: [id])
  imovelId          String
  comissoes         Comissao[]

  @@map("contratos")
}

model Comissao {
  id            String   @id @default(cuid())
  valor         Float
  percentual    Float
  status        String   @default("PENDENTE") // PENDENTE, PAGO, CANCELADO
  dataPagamento DateTime?
  observacoes   String?
  criadoEm      DateTime @default(now())
  atualizadoEm  DateTime @updatedAt

  // Relacionamentos
  corretor      Usuario  @relation(fields: [corretorId], references: [id])
  corretorId    String
  contrato      Contrato @relation(fields: [contratoId], references: [id])
  contratoId    String

  @@map("comissoes")
}

model Mensagem {
  id           String   @id @default(cuid())
  conteudo     String
  tipo         String   // TEXTO, IMAGEM, ARQUIVO
  lida         Boolean  @default(false)
  criadoEm     DateTime @default(now())

  // Relacionamentos
  remetente    Usuario  @relation(fields: [remetenteId], references: [id])
  remetenteId  String
  lead         Lead?    @relation(fields: [leadId], references: [id])
  leadId       String?

  @@map("mensagens")
}

model Notificacao {
  id          String   @id @default(cuid())
  titulo      String
  mensagem    String
  tipo        String   // LEAD, VISITA, CONTRATO, SISTEMA, MARKETING
  lida        Boolean  @default(false)
  criadoEm    DateTime @default(now())

  // Relacionamentos
  usuario     Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId   String

  @@map("notificacoes")
}

model LogSistema {
  id          String   @id @default(cuid())
  acao        String
  detalhes    String?
  ip          String?
  userAgent   String?
  criadoEm    DateTime @default(now())

  // Relacionamentos
  usuario     Usuario? @relation(fields: [usuarioId], references: [id])
  usuarioId   String?

  @@map("logs_sistema")
}
